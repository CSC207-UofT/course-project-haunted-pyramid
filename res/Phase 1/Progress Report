Progress Report:
    Our program is not only runnable, but also has exclusive features that we believe is ahead of many other groups. We
    have data serialization, textual visualization, algorithmic scheduling devices, easy-to-follow instructions and much
    more. Since Phase 0, we have expanded our program to be like an actual program that people would see in an app
    store. For now, we have decided to stay with the console text interface, and will discuss future plans later on.
    Since Phase 0, we also learned a lot from CSC207, like new design patterns and principles of universal design. We
    tried to apply as much of them as possible, to show that we have indeed absorbed the knowledge we were given.
    Furthermore, the code has been cleaned up to never violate Clean Architecture, unlike Phase 0 which had many
    violations and thus required refactoring work on itself for Phase 1. Our progress seems far ahead and superior to
    other groups, and we will strive and continue to follow this path of enhancement and achievement.

Struggles:
    One of our groupmates left the course right before the due date, which made our work distribution disorganized
    and resulted in loss of strict division in work. It would have been nice to either get an extension to make up
    for the loss in the workforce, or provided a portion of the final mark that we would be given by default.
    Also, because our coding styles were not uniform, there had to be minor interceptions and edits to some of the code
    so that the program will run, caused by not only stylistic errors but also inconsistency in data types, parameters,
    inheritance, etc.
    A lack of clear work progress bar made it so that we were not aware of how much work has been done, and also
    how much work needed to be finished to be able to submit on time.
    The instructions of Phase 1 requirements were not clear enough; it would have been nice to see an example case or
    a descriptive list of things to look out for when creating submission documents.

Perks:
    We implemented a lot of design patterns and packaging strategies into our program, while avoiding to violate Clean
    Architecture.
    Serialization is probably the most unique, where our program makes use of the Dropbox cloud services to store and
    retrieve data into and from our program.
    We chose our interface to be the Java console output; Notwithstanding, our program is visually appealing in the
    menus and the actual calendar presentation itself.
    We learned a lot about coding from this phase, including but not limited to: efficient version control, rapid
    debugging, responsibility back-tracing, error decoding, regex & textual representations, and so on.
    Collaboration was a big part in our group, where we tried to spread the work as fairly and unarguably as possible.
    Since this was our first time in trying to code a lot in such a short time window along with other people, it was
    a refreshing experience which enhanced our cooperative skills in teamwork using communication and version control.

Member Works
    Sean Yi
        Work Done:
            Created and refactored most, if not all classes related to the calendar
            Textual visualization of the calendar in the console
            Presenters and their connections with the controller
            Assisted in debugging and refactoring other classes responsible by groupmates
            Altered many classes and methods to be abstract and also cleaner
            Founded and created menus and helpers to process user input
            Class structure and working path organization
            Syntax and logic error debugging
        Work To Be Done:
            Research and implementation of new interface, such as executables or HTML/CSS
            Feature additions and minor error debugging
    Sebin Im
        Work Done:
            Altered most of the controllers and managers, and their interactions between each other
            Made sure that interface adapters are following clean architecture as specified
            Implemented log in and user verification
            Research, learning and applying Dropbox API into our program for enhanced security
            Founded and implemented data serialization and deserialization of files to read/write required objects
            Updated project structure to enhance security of important files
            Class structure and working path organization
            Syntax and logic error debugging
        Work To Be Done:
            Research and implementation of new interface, such as executables or HTML/CSS
            Further improvement in serialization
            Feature additions and minor error debugging
    Taite Cullen
        Work Done:
            Added menus and implemented user input comprehension system
            Created methods that allow various alterations on an event
            Founded and added work sessions and its interaction with other classes
            Worked on event modification improvements
            Class structure and working path organization
            Syntax and logic error debugging
        Work To Be Done:
            Feature additions and minor error debugging
            Improvements on the interactions of work session
    Mailk Lahlou
        Work Done:
            Founded and added categories
            Implemented recursions and its corresponding classes
            Worked on event modification improvements
            Class structure and working path organization
            Syntax and logic error debugging
        Work To Be Done:
            Feature additions and minor error debugging
            Improvements on the interactions of recursion and its corresponding classes

    Shameel Farooq
        Work Done:
            Researched and implemented algorithm for scheduler
            Added work sessions and its interaction with other classes
            Syntax and logic error debugging
        Work To Be Done:
            Research on possible Java libraries to be used in Phase 2
            Feature additions and minor error debugging
            Improvements on the interactions of scheduler algorithm
